##############################################################################
#
# This Makefile is meant to be included by immediate subfolders of
# examples.
#
# We assume that CFML has been installed.
#
# Optionally, the variable $(ML) can be used to specify which sources
# to build characteristic formulae for.
#
# Optionally, the variable $(ML_MAIN) can be used to specify which
# sources to consider for compilation using ocamlbuild. It can remain
# undefined if there is only one .ml file.
#
# Optionally, the variable $(V) can be used to specify which Coq
# sources to compile. $(V_IGNORED) can be used to specify instead
# which Coq sources to ignore.
#
# Optionally, $(OCAML_FLAGS) can be set (e.g. to "-rectypes").
#
# Optionally, $(CFML_FLAGS) can be set (e.g. to "-debug").

CFML := $(shell cfmlc -where)

##############################################################################

# Export every variable to every sub-make.
export

##############################################################################
# The variable TLC is used to find $(TLC)/Makefile.coq.

TLC := $(shell $(COQBIN)coqc -where)/user-contrib/TLC


##############################################################################
# Options for CFML.

PWD := $(shell pwd)

ifndef V
	V := $(wildcard $(PWD)/*.v)
endif

COQINCLUDE := \
  -R $(shell $(COQBIN)coqc -where)/user-contrib/CFML/Stdlib CFML.Stdlib \
  -R $(PWD) EXAMPLE \

##############################################################################
# Options for OCaml.

ifndef ML
  ML := $(filter-out myocamlbuild.ml,$(shell ls *.ml))
endif

ifndef OCAML_INCLUDE
  OCAML_INCLUDE := \
    -I $(PWD)
endif

ifndef ML_MAIN
  ML_MAIN := $(ML)
endif

OCAMLBUILD := \
  ocamlbuild \
    -classic-display -use-ocamlfind \
    -cflags "-g" -lflags "-g" \
    -X .coq-native \
    $(OCAMLBUILD_FLAGS) \


##############################################################################
# Targets

.PHONY: all clean _CoqProject

all:
# We use a sequence intentionally, as it does not make much sense
# to proceed unless the previous phase was successful.
# 1. Compile the OCaml code.
	@ $(OCAMLBUILD) $(ML_MAIN:.ml=.native)
# 2. Build the characteristic formulae.
	@ $(MAKE) --no-print-directory -f $(CFML)/make/Makefile.cfml
# 3. Check the Coq proofs.
#    While we're at it, regenerate the _CoqProject file. (Optional.)
	@ $(MAKE) -f $(TLC)/Makefile.coq _CoqProject proof


##############################################################################
# _CoqProject

_CoqProject: .FORCE
	@echo $(COQINCLUDE) > $@

.FORCE:


##############################################################################
# Cleanup.

clean:
	rm -rf _build *.native
	@make -f $(CFML)/make/Makefile.cfml $@
	$(MAKE) -f $(TLC)/Makefile.coq $@
	rm -f _CoqProject
